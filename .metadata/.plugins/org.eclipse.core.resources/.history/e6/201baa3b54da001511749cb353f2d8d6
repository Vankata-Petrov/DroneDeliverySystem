package managers;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import droneDeliverySystem.Drone;
import droneDeliverySystem.Location;
import droneDeliverySystem.Product;
import droneDeliverySystem.Warehouse;

public class DroneManager {
	
	private List<Drone> drones;
	
	public DroneManager(List<Drone> drones) {
		this.drones = drones;
	}
	
	public void executeDelivery(Map<Product, Integer> products, Location deliveryLocation, 
			Warehouse warehouse, String requestId) {
		
		double distWarehouseDeliveryLocation = distanceFromWarehouseToDeliveryLocation(deliveryLocation, warehouse.getLocation());
		
		// get weight of all products
		double result = 0;
		
		for (Map.Entry<Product, Integer> product : products.entrySet()) {
			result += product.getKey().getWeightPerQuantity() * product.getValue();
		}
		
		
		for (Drone drone : drones) {
			
			if(products.isEmpty()) {
				break;
			}
			
			if(drone.getBattery() >= distWarehouseDeliveryLocation * 2) {
				if(canCarryAll(products, drone)) {
					
					
					System.out.println("Drone delivering all products: ");
					int productsWeight = 0;
					for (Map.Entry<Product, Integer> product : products.entrySet()) {
						System.out.println(product.getKey() + ": " + product.getValue());
						productsWeight += product.getKey().getWeightPerQuantity() * product.getValue();
					}
					System.out.println("Drone weight capacity: " + drone.getCapacity() + ", Products weight: " + productsWeight);
					
					deliver(drone, products, distWarehouseDeliveryLocation);
					break;
				} else {
					Map<Product, Integer> toCarry = maxToCarry(products, drone);
					
					
					System.out.println("Drone delivering NOT all products: ");
					int productsWeight = 0;
					for (Map.Entry<Product, Integer> product : toCarry.entrySet()) {
						System.out.println(product.getKey() + ": " + product.getValue());
						productsWeight += product.getKey().getWeightPerQuantity() * product.getValue();
					}
					System.out.println("Drone weight capacity: " + drone.getCapacity() + ", Products weight: " + productsWeight);
					
					
					
					deliver(drone, toCarry, distWarehouseDeliveryLocation);
					
					System.out.println("Still to be delivered: ");
					for (Map.Entry<Product, Integer> product : products.entrySet()) {
						System.out.println(product.getKey() + ": " + product.getValue());
					}
					
				}
			}
		}
		
		
		/*for (Drone drone : drones) {
			if(drone.getBattery() >= distWarehouseDeliveryLocation * 2) {
				if(canCarryAll(products, drone)) {
					deliver(drone, products, distWarehouseDeliveryLocation);
				} else {
					System.out.println("Drone max weight capacity: " + drone.getCapacity());
					int current = 0;
					while(true) {
						if(current + products.get(key))
					}
				}
			}
		}*/
		
	}

	private Map<Product, Integer> maxToCarry(Map<Product, Integer> products, Drone drone) {
		int droneCapacity = drone.getCapacity();
		int currentWeight = 0;
		
		Map<Product, Integer> resultMap = new HashMap<>();
		
		Iterator<Map.Entry<Product, Integer>> productsIter = products.entrySet().iterator();
		
		while(productsIter.hasNext()) {
			Map.Entry<Product, Integer> entry = productsIter.next();
			Product currentProduct = entry.getKey();
			int productQuantity = entry.getValue();
			
			for(int i = 0; i < productQuantity; i++) {
				if(currentWeight + currentProduct.getWeightPerQuantity() <= droneCapacity) {
					System.out.println("ADDING " + currentProduct); 
					if(resultMap.containsKey(currentProduct)) {
						int previousQuantity = resultMap.get(currentProduct);
						resultMap.put(currentProduct, previousQuantity + 1);
					} else {
						resultMap.put(currentProduct, 1);
					}
					currentWeight += currentProduct.getWeightPerQuantity();
					
					if(products.get(currentProduct) == 1) {
						productsIter.remove();
					} else {
						int previousQuantity = products.get(currentProduct);
						products.put(currentProduct, previousQuantity - 1);
					}
				}
				
			}
		}
		
		return resultMap;
	}

	private void deliver(Drone drone, Map<Product, Integer> products, double distWarehouseDeliveryLocation) {
		estimateETA(distWarehouseDeliveryLocation, products.size());
		int currentBattery = drone.getBattery();
		System.out.println("Old battery: " + currentBattery);
		drone.setBatteryLevel(currentBattery - (int)distWarehouseDeliveryLocation * 2);
		System.out.println("New battery: " + (currentBattery - (int)distWarehouseDeliveryLocation * 2));
	}

	private void estimateETA(double distWarehouseDeliveryLocation, int productsCount) {
		double minutes = distWarehouseDeliveryLocation + productsCount * 2;
		System.out.println("Minutes to your delivery: " + minutes);
		
	}

	private double distanceFromWarehouseToDeliveryLocation(Location deliveryLocation, Location warehouse) {
		int xDelivery = deliveryLocation.getXCoordinate();
		int yDelivery = deliveryLocation.getYCoordinate();
		
		int xWarehouse = warehouse.getXCoordinate();
		int yWarehouse = warehouse.getYCoordinate();
		
		double distance = Math.sqrt( Math.pow((xWarehouse - xDelivery), 2) + Math.pow((yWarehouse - yDelivery), 2));
		return distance;
	}
	
	// sum of all products' weights
	public boolean canCarryAll(Map<Product, Integer> products, Drone drone) {
		double result = 0;
		
		for (Map.Entry<Product, Integer> product : products.entrySet()) {
			result += product.getKey().getWeightPerQuantity() * product.getValue();
		}
		
		return result <= drone.getCapacity();
	}
	
	public void addDrone(Drone toAdd) {
		drones.add(toAdd);
	}
}
